"""
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be:

    1+2+3+4+5+6+7=28
 
28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""

# Another slow solution ffs - why can't things be simple anymore :(
from datetime import datetime

def triangleOf(n: int):
     print("find triangle")
     return sum(range(1, n+1))

#The slow part
def findNumDivisorsOf(n: int):
    divisors = 0
    print(f"find divisors of {n}")
    
    for i in range(1, n+1):
            if(n%i==0):
                divisors+=1

            if(divisors > 500):
                 return 501

    return divisors

def findTriangle(n):
    currentIndex = 1
    previousTriangle = 0
    currentTriangle = 0
    numDivisors = 0

    # Probably doesn't work - first 500 may appear between numbers in the 400s

    #look far and quick
    while numDivisors <= n:
        currentTriangle = triangleOf(currentIndex)
        numDivisors = findNumDivisorsOf(currentTriangle)
        print(f"Divisors: {numDivisors}\n")

        currentIndex*=2

    #reel it back in
    while numDivisors > n-1:
        currentIndex-=1
        previousTriangle = currentTriangle
        currentTriangle = triangleOf(currentIndex)
        numDivisors = findNumDivisorsOf(currentTriangle)
        print(f"Divisors: {numDivisors}\n")
        

    return previousTriangle

if __name__ == "__main__":
    start = datetime.now()
    print(f"The first triangle number with over 500 factors is: {findTriangle(500)}")
    print(f"Start: {start}")
    print(f"End :{datetime.now()}")
    